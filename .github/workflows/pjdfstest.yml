name: pjdfstest

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  pjdfstest:
    name: Run pjdfstest NFS Test Suite
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      
      - name: Start MinIO
        run: |
          docker run -d \
            --name minio \
            -p 9000:9000 \
            -e MINIO_ROOT_USER=minioadmin \
            -e MINIO_ROOT_PASSWORD=minioadmin \
            minio/minio server /data
          
          # Wait for MinIO to be ready
          for i in {1..30}; do
            if curl -f http://localhost:9000/minio/health/live; then
              echo "MinIO is ready"
              break
            fi
            sleep 1
          done
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y nfs-common build-essential autoconf automake libtool git perl
          
      - name: Clone pjdfstest_nfs
        run: |
          git clone https://github.com/Barre/pjdfstest_nfs.git /tmp/pjdfstest_nfs
          
      - name: Build pjdfstest
        working-directory: /tmp/pjdfstest_nfs
        run: |
          autoreconf -fvi
          ./configure
          make
          
      - name: Setup MinIO bucket
        run: |
          # Install mc (MinIO client)
          wget https://dl.min.io/client/mc/release/linux-amd64/mc
          chmod +x mc
          ./mc alias set myminio http://localhost:9000 minioadmin minioadmin
          ./mc mb myminio/zerofs-test || true
          
      - name: Build ZeroFS
        run: cargo build --release
        
      - name: Start ZeroFS
        run: |
          # Create cache directory
          mkdir -p /tmp/zerofs-cache
          
          # Start ZeroFS in the background
          AWS_ENDPOINT_URL=http://localhost:9000 \
          AWS_S3_BUCKET=zerofs-test \
          AWS_ACCESS_KEY_ID=minioadmin \
          AWS_SECRET_ACCESS_KEY=minioadmin \
          AWS_ALLOW_HTTP=true \
          SLATEDB_CACHE_DIR=/tmp/zerofs-cache \
          SLATEDB_CACHE_SIZE_GB=1 \
          cargo run --release test &
          
          # Wait for ZeroFS to start
          echo "Waiting for ZeroFS to start..."
          for i in {1..30}; do
            if nc -z 127.0.0.1 2049; then
              echo "ZeroFS is ready"
              break
            fi
            sleep 1
          done
          
          # Verify ZeroFS is running
          if ! nc -z 127.0.0.1 2049; then
            echo "ZeroFS failed to start"
            exit 1
          fi
          
      - name: Mount NFS
        run: |
          # Create mount point
          sudo mkdir -p /mnt/zerofs
          
          # Mount ZeroFS via NFS
          sudo mount -t nfs -o vers=3,nolock,tcp,port=2049,mountport=2049,soft 127.0.0.1:/ /mnt/zerofs
          
          # Verify mount
          mount | grep zerofs
          
      - name: Run pjdfstest
        working-directory: /mnt/zerofs
        run: |
          # Run the test suite
          sudo prove -rv /tmp/pjdfstest_nfs/tests/
          
      - name: Cleanup
        if: always()
        run: |
          # Unmount
          sudo umount /mnt/zerofs || true
          
          # Kill ZeroFS
          pkill -f "cargo run --release test" || true