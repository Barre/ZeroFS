name: kernel-compile-nfs

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  kernel-compile-nfs:
    name: Compile Linux Kernel on NFS
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Start MinIO
        run: |
          docker run -d \
            --name minio \
            -p 9000:9000 \
            -e MINIO_ROOT_USER=minioadmin \
            -e MINIO_ROOT_PASSWORD=minioadmin \
            minio/minio server /data

          # Wait for MinIO to be ready
          for i in {1..30}; do
            if curl -f http://localhost:9000/minio/health/live; then
              echo "MinIO is ready"
              break
            fi
            sleep 1
          done

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y nfs-common build-essential libncurses-dev bison flex libssl-dev libelf-dev bc

      - name: Setup MinIO bucket
        run: |
          # Install mc (MinIO client)
          wget https://dl.min.io/client/mc/release/linux-amd64/mc
          chmod +x mc
          ./mc alias set myminio http://localhost:9000 minioadmin minioadmin
          ./mc mb myminio/zerofs-test || true

      - name: Build ZeroFS
        working-directory: zerofs
        run: cargo build --profile ci

      - name: Start ZeroFS
        working-directory: zerofs
        run: |
          # Create cache directory
          mkdir -p /tmp/zerofs-cache

          # Create ZeroFS configuration
          cat > zerofs-ci.toml << EOF
          [cache]
          dir = "/tmp/zerofs-cache"
          disk_size_gb = 5.0
          memory_size_gb = 10.0

          [storage]
          url = "s3://zerofs-test/test"
          encryption_password = "secret"

          [servers.nfs]
          host = "127.0.0.1"
          port = 2049

          [aws]
          access_key_id = "minioadmin"
          secret_access_key = "minioadmin"
          endpoint = "http://localhost:9000"
          allow_http = "true"
          EOF

          # Start ZeroFS in the background
          cargo run --profile ci -- run -c zerofs-ci.toml &

          # Save PID for stats collection
          echo $! > /tmp/zerofs.pid

          # Wait for ZeroFS to start
          echo "Waiting for ZeroFS to start..."
          for i in {1..30}; do
            if nc -z 127.0.0.1 2049; then
              echo "ZeroFS is ready"
              break
            fi
            sleep 1
          done

          # Verify ZeroFS is running
          if ! nc -z 127.0.0.1 2049; then
            echo "ZeroFS failed to start"
            exit 1
          fi

      - name: Mount NFS
        run: |
          # Create mount point
          sudo mkdir -p /mnt/zerofs

          # Mount ZeroFS via NFS
          sudo mount -t nfs -o vers=3,async,nolock,rsize=1048576,wsize=1048576,tcp,port=2049,mountport=2049,hard 127.0.0.1:/ /mnt/zerofs

          # Verify mount
          mount | grep zerofs

      - name: Check disk space
        run: df -h

      - name: Download Linux kernel
        run: |
          cd /mnt/zerofs
          wget -q https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-6.11.tar.xz
          tar -xf linux-6.11.tar.xz
          rm linux-6.11.tar.xz

      - name: Compile kernel
        run: |
          cd /mnt/zerofs/linux-6.11

          # Configure with tinyconfig for minimal build
          make tinyconfig

          # Show config size
          echo "Config size: $(wc -l < .config) lines"

          # Time the compilation
          echo "Starting kernel compilation with $(nproc) cores..."
          time make -j$(nproc) 2>&1 | tee /tmp/kernel-build.log

          # Check if vmlinux was created
          if [ -f vmlinux ]; then
            echo "Kernel compilation successful!"
            ls -lh vmlinux
          else
            echo "Kernel compilation failed!"
            exit 1
          fi

      - name: Cleanup
        if: always()
        run: |
          # Unmount
          sudo umount /mnt/zerofs || true

          # Kill ZeroFS
          if [ -f /tmp/zerofs.pid ]; then
            kill $(cat /tmp/zerofs.pid) || true
          fi
          pkill -f "cargo run --profile ci -- run -c zerofs-ci.toml" || true
